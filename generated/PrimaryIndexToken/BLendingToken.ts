// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccrueInterest extends ethereum.Event {
  get params(): AccrueInterest__Params {
    return new AccrueInterest__Params(this);
  }
}

export class AccrueInterest__Params {
  _event: AccrueInterest;

  constructor(event: AccrueInterest) {
    this._event = event;
  }

  get cashPrior(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get interestAccumulated(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get borrowIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Failure extends ethereum.Event {
  get params(): Failure__Params {
    return new Failure__Params(this);
  }
}

export class Failure__Params {
  _event: Failure;

  constructor(event: Failure) {
    this._event = event;
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidateBorrow extends ethereum.Event {
  get params(): LiquidateBorrow__Params {
    return new LiquidateBorrow__Params(this);
  }
}

export class LiquidateBorrow__Params {
  _event: LiquidateBorrow;

  constructor(event: LiquidateBorrow) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cTokenCollateral(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mintTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewBondtroller extends ethereum.Event {
  get params(): NewBondtroller__Params {
    return new NewBondtroller__Params(this);
  }
}

export class NewBondtroller__Params {
  _event: NewBondtroller;

  constructor(event: NewBondtroller) {
    this._event = event;
  }

  get oldBondtroller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBondtroller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewMarketInterestRateModel extends ethereum.Event {
  get params(): NewMarketInterestRateModel__Params {
    return new NewMarketInterestRateModel__Params(this);
  }
}

export class NewMarketInterestRateModel__Params {
  _event: NewMarketInterestRateModel;

  constructor(event: NewMarketInterestRateModel) {
    this._event = event;
  }

  get oldInterestRateModel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newInterestRateModel(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPendingAdmin extends ethereum.Event {
  get params(): NewPendingAdmin__Params {
    return new NewPendingAdmin__Params(this);
  }
}

export class NewPendingAdmin__Params {
  _event: NewPendingAdmin;

  constructor(event: NewPendingAdmin) {
    this._event = event;
  }

  get oldPendingAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewReserveFactor extends ethereum.Event {
  get params(): NewReserveFactor__Params {
    return new NewReserveFactor__Params(this);
  }
}

export class NewReserveFactor__Params {
  _event: NewReserveFactor;

  constructor(event: NewReserveFactor) {
    this._event = event;
  }

  get oldReserveFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newReserveFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RepayBorrow extends ethereum.Event {
  get params(): RepayBorrow__Params {
    return new RepayBorrow__Params(this);
  }
}

export class RepayBorrow__Params {
  _event: RepayBorrow;

  constructor(event: RepayBorrow) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accountBorrows(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalBorrows(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ReservesAdded extends ethereum.Event {
  get params(): ReservesAdded__Params {
    return new ReservesAdded__Params(this);
  }
}

export class ReservesAdded__Params {
  _event: ReservesAdded;

  constructor(event: ReservesAdded) {
    this._event = event;
  }

  get benefactor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTotalReserves(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReservesReduced extends ethereum.Event {
  get params(): ReservesReduced__Params {
    return new ReservesReduced__Params(this);
  }
}

export class ReservesReduced__Params {
  _event: ReservesReduced;

  constructor(event: ReservesReduced) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reduceAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newTotalReserves(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetPrimaryIndexToken extends ethereum.Event {
  get params(): SetPrimaryIndexToken__Params {
    return new SetPrimaryIndexToken__Params(this);
  }
}

export class SetPrimaryIndexToken__Params {
  _event: SetPrimaryIndexToken;

  constructor(event: SetPrimaryIndexToken) {
    this._event = event;
  }

  get oldPrimaryIndexToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPrimaryIndexToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BLendingToken__getAccountSnapshotResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class BLendingToken__mintToResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getErr(): BigInt {
    return this.value0;
  }

  getMintedAmount(): BigInt {
    return this.value1;
  }
}

export class BLendingToken__repayToResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRepayBorrowError(): BigInt {
    return this.value0;
  }

  getAmountRepayed(): BigInt {
    return this.value1;
  }
}

export class BLendingToken extends ethereum.SmartContract {
  static bind(address: Address): BLendingToken {
    return new BLendingToken("BLendingToken", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MODERATOR_ROLE(): Bytes {
    let result = super.call("MODERATOR_ROLE", "MODERATOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MODERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MODERATOR_ROLE",
      "MODERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _addReserves(addAmount: BigInt): BigInt {
    let result = super.call("_addReserves", "_addReserves(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(addAmount)
    ]);

    return result[0].toBigInt();
  }

  try__addReserves(addAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_addReserves",
      "_addReserves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(addAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _reduceReserves(reduceAmount: BigInt): BigInt {
    let result = super.call(
      "_reduceReserves",
      "_reduceReserves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(reduceAmount)]
    );

    return result[0].toBigInt();
  }

  try__reduceReserves(reduceAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_reduceReserves",
      "_reduceReserves(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(reduceAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setBondtroller(newBondtroller: Address): BigInt {
    let result = super.call(
      "_setBondtroller",
      "_setBondtroller(address):(uint256)",
      [ethereum.Value.fromAddress(newBondtroller)]
    );

    return result[0].toBigInt();
  }

  try__setBondtroller(newBondtroller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setBondtroller",
      "_setBondtroller(address):(uint256)",
      [ethereum.Value.fromAddress(newBondtroller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setInterestRateModel(newInterestRateModel: Address): BigInt {
    let result = super.call(
      "_setInterestRateModel",
      "_setInterestRateModel(address):(uint256)",
      [ethereum.Value.fromAddress(newInterestRateModel)]
    );

    return result[0].toBigInt();
  }

  try__setInterestRateModel(
    newInterestRateModel: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setInterestRateModel",
      "_setInterestRateModel(address):(uint256)",
      [ethereum.Value.fromAddress(newInterestRateModel)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setReserveFactor(newReserveFactorMantissa: BigInt): BigInt {
    let result = super.call(
      "_setReserveFactor",
      "_setReserveFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newReserveFactorMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setReserveFactor(
    newReserveFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setReserveFactor",
      "_setReserveFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newReserveFactorMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountTokens(param0: Address): BigInt {
    let result = super.call(
      "accountTokens",
      "accountTokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_accountTokens(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountTokens",
      "accountTokens(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrualBlockNumber(): BigInt {
    let result = super.call(
      "accrualBlockNumber",
      "accrualBlockNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accrualBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accrualBlockNumber",
      "accrualBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrueInterest(): BigInt {
    let result = super.call("accrueInterest", "accrueInterest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_accrueInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accrueInterest",
      "accrueInterest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(owner: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlyingView(owner: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlyingView",
      "balanceOfUnderlyingView(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlyingView(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlyingView",
      "balanceOfUnderlyingView(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bondtroller(): Address {
    let result = super.call("bondtroller", "bondtroller():(address)", []);

    return result[0].toAddress();
  }

  try_bondtroller(): ethereum.CallResult<Address> {
    let result = super.tryCall("bondtroller", "bondtroller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowBalanceCurrent(account: Address): BigInt {
    let result = super.call(
      "borrowBalanceCurrent",
      "borrowBalanceCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_borrowBalanceCurrent(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowBalanceCurrent",
      "borrowBalanceCurrent(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowBalanceStored(account: Address): BigInt {
    let result = super.call(
      "borrowBalanceStored",
      "borrowBalanceStored(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_borrowBalanceStored(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowBalanceStored",
      "borrowBalanceStored(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowIndex(): BigInt {
    let result = super.call("borrowIndex", "borrowIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_borrowIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowIndex", "borrowIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowRatePerBlock(): BigInt {
    let result = super.call(
      "borrowRatePerBlock",
      "borrowRatePerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_borrowRatePerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowRatePerBlock",
      "borrowRatePerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowTo(borrower: Address, borrowAmount: BigInt): BigInt {
    let result = super.call("borrowTo", "borrowTo(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(borrower),
      ethereum.Value.fromUnsignedBigInt(borrowAmount)
    ]);

    return result[0].toBigInt();
  }

  try_borrowTo(
    borrower: Address,
    borrowAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowTo",
      "borrowTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  exchangeRateCurrent(): BigInt {
    let result = super.call(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateStored(): BigInt {
    let result = super.call(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateStored",
      "exchangeRateStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountSnapshot(
    account: Address
  ): BLendingToken__getAccountSnapshotResult {
    let result = super.call(
      "getAccountSnapshot",
      "getAccountSnapshot(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new BLendingToken__getAccountSnapshotResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getAccountSnapshot(
    account: Address
  ): ethereum.CallResult<BLendingToken__getAccountSnapshotResult> {
    let result = super.tryCall(
      "getAccountSnapshot",
      "getAccountSnapshot(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BLendingToken__getAccountSnapshotResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getCash(): BigInt {
    let result = super.call("getCash", "getCash():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCash(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCash", "getCash():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEstimatedBorrowBalanceStored(account: Address): BigInt {
    let result = super.call(
      "getEstimatedBorrowBalanceStored",
      "getEstimatedBorrowBalanceStored(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getEstimatedBorrowBalanceStored(
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEstimatedBorrowBalanceStored",
      "getEstimatedBorrowBalanceStored(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEstimatedBorrowIndex(): BigInt {
    let result = super.call(
      "getEstimatedBorrowIndex",
      "getEstimatedBorrowIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEstimatedBorrowIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEstimatedBorrowIndex",
      "getEstimatedBorrowIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interestRateModel(): Address {
    let result = super.call(
      "interestRateModel",
      "interestRateModel():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_interestRateModel(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestRateModel",
      "interestRateModel():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isCToken(): boolean {
    let result = super.call("isCToken", "isCToken():(bool)", []);

    return result[0].toBoolean();
  }

  try_isCToken(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCToken", "isCToken():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintTo(minter: Address, mintAmount: BigInt): BLendingToken__mintToResult {
    let result = super.call(
      "mintTo",
      "mintTo(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );

    return new BLendingToken__mintToResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mintTo(
    minter: Address,
    mintAmount: BigInt
  ): ethereum.CallResult<BLendingToken__mintToResult> {
    let result = super.tryCall(
      "mintTo",
      "mintTo(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BLendingToken__mintToResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  primaryIndexToken(): Address {
    let result = super.call(
      "primaryIndexToken",
      "primaryIndexToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_primaryIndexToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "primaryIndexToken",
      "primaryIndexToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolSeizeShareMantissa(): BigInt {
    let result = super.call(
      "protocolSeizeShareMantissa",
      "protocolSeizeShareMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolSeizeShareMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolSeizeShareMantissa",
      "protocolSeizeShareMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemTo(redeemer: Address, redeemTokens: BigInt): BigInt {
    let result = super.call("redeemTo", "redeemTo(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(redeemer),
      ethereum.Value.fromUnsignedBigInt(redeemTokens)
    ]);

    return result[0].toBigInt();
  }

  try_redeemTo(
    redeemer: Address,
    redeemTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemTo",
      "redeemTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlyingTo(redeemer: Address, redeemAmount: BigInt): BigInt {
    let result = super.call(
      "redeemUnderlyingTo",
      "redeemUnderlyingTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlyingTo(
    redeemer: Address,
    redeemAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlyingTo",
      "redeemUnderlyingTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayTo(
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): BLendingToken__repayToResult {
    let result = super.call(
      "repayTo",
      "repayTo(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return new BLendingToken__repayToResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_repayTo(
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BLendingToken__repayToResult> {
    let result = super.tryCall(
      "repayTo",
      "repayTo(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BLendingToken__repayToResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  reserveFactorMantissa(): BigInt {
    let result = super.call(
      "reserveFactorMantissa",
      "reserveFactorMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reserveFactorMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveFactorMantissa",
      "reserveFactorMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supplyRatePerBlock(): BigInt {
    let result = super.call(
      "supplyRatePerBlock",
      "supplyRatePerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_supplyRatePerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyRatePerBlock",
      "supplyRatePerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBorrows(): BigInt {
    let result = super.call("totalBorrows", "totalBorrows():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBorrows(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBorrows", "totalBorrows():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrowsCurrent(): BigInt {
    let result = super.call(
      "totalBorrowsCurrent",
      "totalBorrowsCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBorrowsCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowsCurrent",
      "totalBorrowsCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReserves(): BigInt {
    let result = super.call("totalReserves", "totalReserves():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalReserves(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReserves",
      "totalReserves():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class _addReservesCall extends ethereum.Call {
  get inputs(): _addReservesCall__Inputs {
    return new _addReservesCall__Inputs(this);
  }

  get outputs(): _addReservesCall__Outputs {
    return new _addReservesCall__Outputs(this);
  }
}

export class _addReservesCall__Inputs {
  _call: _addReservesCall;

  constructor(call: _addReservesCall) {
    this._call = call;
  }

  get addAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _addReservesCall__Outputs {
  _call: _addReservesCall;

  constructor(call: _addReservesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _reduceReservesCall extends ethereum.Call {
  get inputs(): _reduceReservesCall__Inputs {
    return new _reduceReservesCall__Inputs(this);
  }

  get outputs(): _reduceReservesCall__Outputs {
    return new _reduceReservesCall__Outputs(this);
  }
}

export class _reduceReservesCall__Inputs {
  _call: _reduceReservesCall;

  constructor(call: _reduceReservesCall) {
    this._call = call;
  }

  get reduceAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _reduceReservesCall__Outputs {
  _call: _reduceReservesCall;

  constructor(call: _reduceReservesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setBondtrollerCall extends ethereum.Call {
  get inputs(): _setBondtrollerCall__Inputs {
    return new _setBondtrollerCall__Inputs(this);
  }

  get outputs(): _setBondtrollerCall__Outputs {
    return new _setBondtrollerCall__Outputs(this);
  }
}

export class _setBondtrollerCall__Inputs {
  _call: _setBondtrollerCall;

  constructor(call: _setBondtrollerCall) {
    this._call = call;
  }

  get newBondtroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setBondtrollerCall__Outputs {
  _call: _setBondtrollerCall;

  constructor(call: _setBondtrollerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setInterestRateModelCall extends ethereum.Call {
  get inputs(): _setInterestRateModelCall__Inputs {
    return new _setInterestRateModelCall__Inputs(this);
  }

  get outputs(): _setInterestRateModelCall__Outputs {
    return new _setInterestRateModelCall__Outputs(this);
  }
}

export class _setInterestRateModelCall__Inputs {
  _call: _setInterestRateModelCall;

  constructor(call: _setInterestRateModelCall) {
    this._call = call;
  }

  get newInterestRateModel(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setInterestRateModelCall__Outputs {
  _call: _setInterestRateModelCall;

  constructor(call: _setInterestRateModelCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setReserveFactorCall extends ethereum.Call {
  get inputs(): _setReserveFactorCall__Inputs {
    return new _setReserveFactorCall__Inputs(this);
  }

  get outputs(): _setReserveFactorCall__Outputs {
    return new _setReserveFactorCall__Outputs(this);
  }
}

export class _setReserveFactorCall__Inputs {
  _call: _setReserveFactorCall;

  constructor(call: _setReserveFactorCall) {
    this._call = call;
  }

  get newReserveFactorMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setReserveFactorCall__Outputs {
  _call: _setReserveFactorCall;

  constructor(call: _setReserveFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BalanceOfUnderlyingCall extends ethereum.Call {
  get inputs(): BalanceOfUnderlyingCall__Inputs {
    return new BalanceOfUnderlyingCall__Inputs(this);
  }

  get outputs(): BalanceOfUnderlyingCall__Outputs {
    return new BalanceOfUnderlyingCall__Outputs(this);
  }
}

export class BalanceOfUnderlyingCall__Inputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BalanceOfUnderlyingCall__Outputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowBalanceCurrentCall extends ethereum.Call {
  get inputs(): BorrowBalanceCurrentCall__Inputs {
    return new BorrowBalanceCurrentCall__Inputs(this);
  }

  get outputs(): BorrowBalanceCurrentCall__Outputs {
    return new BorrowBalanceCurrentCall__Outputs(this);
  }
}

export class BorrowBalanceCurrentCall__Inputs {
  _call: BorrowBalanceCurrentCall;

  constructor(call: BorrowBalanceCurrentCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BorrowBalanceCurrentCall__Outputs {
  _call: BorrowBalanceCurrentCall;

  constructor(call: BorrowBalanceCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowToCall extends ethereum.Call {
  get inputs(): BorrowToCall__Inputs {
    return new BorrowToCall__Inputs(this);
  }

  get outputs(): BorrowToCall__Outputs {
    return new BorrowToCall__Outputs(this);
  }
}

export class BorrowToCall__Inputs {
  _call: BorrowToCall;

  constructor(call: BorrowToCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowToCall__Outputs {
  _call: BorrowToCall;

  constructor(call: BorrowToCall) {
    this._call = call;
  }

  get borrowError(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExchangeRateCurrentCall extends ethereum.Call {
  get inputs(): ExchangeRateCurrentCall__Inputs {
    return new ExchangeRateCurrentCall__Inputs(this);
  }

  get outputs(): ExchangeRateCurrentCall__Outputs {
    return new ExchangeRateCurrentCall__Outputs(this);
  }
}

export class ExchangeRateCurrentCall__Inputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }
}

export class ExchangeRateCurrentCall__Outputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GrandModeratorCall extends ethereum.Call {
  get inputs(): GrandModeratorCall__Inputs {
    return new GrandModeratorCall__Inputs(this);
  }

  get outputs(): GrandModeratorCall__Outputs {
    return new GrandModeratorCall__Outputs(this);
  }
}

export class GrandModeratorCall__Inputs {
  _call: GrandModeratorCall;

  constructor(call: GrandModeratorCall) {
    this._call = call;
  }

  get newModerator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrandModeratorCall__Outputs {
  _call: GrandModeratorCall;

  constructor(call: GrandModeratorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get underlying_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bondtroller_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get interestRateModel_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get initialExchangeRateMantissa_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get name_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[5].value.toString();
  }

  get decimals_(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get admin_(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get underlying_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get comptroller_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get interestRateModel_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get initialExchangeRateMantissa_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get name_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[5].value.toString();
  }

  get decimals_(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get bondtroller_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get interestRateModel_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initialExchangeRateMantissa_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get name_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get decimals_(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get err(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get mintedAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RedeemToCall extends ethereum.Call {
  get inputs(): RedeemToCall__Inputs {
    return new RedeemToCall__Inputs(this);
  }

  get outputs(): RedeemToCall__Outputs {
    return new RedeemToCall__Outputs(this);
  }
}

export class RedeemToCall__Inputs {
  _call: RedeemToCall;

  constructor(call: RedeemToCall) {
    this._call = call;
  }

  get redeemer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemToCall__Outputs {
  _call: RedeemToCall;

  constructor(call: RedeemToCall) {
    this._call = call;
  }

  get redeemErr(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingToCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingToCall__Inputs {
    return new RedeemUnderlyingToCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingToCall__Outputs {
    return new RedeemUnderlyingToCall__Outputs(this);
  }
}

export class RedeemUnderlyingToCall__Inputs {
  _call: RedeemUnderlyingToCall;

  constructor(call: RedeemUnderlyingToCall) {
    this._call = call;
  }

  get redeemer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemUnderlyingToCall__Outputs {
  _call: RedeemUnderlyingToCall;

  constructor(call: RedeemUnderlyingToCall) {
    this._call = call;
  }

  get redeemUnderlyingError(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RepayToCall extends ethereum.Call {
  get inputs(): RepayToCall__Inputs {
    return new RepayToCall__Inputs(this);
  }

  get outputs(): RepayToCall__Outputs {
    return new RepayToCall__Outputs(this);
  }
}

export class RepayToCall__Inputs {
  _call: RepayToCall;

  constructor(call: RepayToCall) {
    this._call = call;
  }

  get payer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RepayToCall__Outputs {
  _call: RepayToCall;

  constructor(call: RepayToCall) {
    this._call = call;
  }

  get repayBorrowError(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountRepayed(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RevokeModeratorCall extends ethereum.Call {
  get inputs(): RevokeModeratorCall__Inputs {
    return new RevokeModeratorCall__Inputs(this);
  }

  get outputs(): RevokeModeratorCall__Outputs {
    return new RevokeModeratorCall__Outputs(this);
  }
}

export class RevokeModeratorCall__Inputs {
  _call: RevokeModeratorCall;

  constructor(call: RevokeModeratorCall) {
    this._call = call;
  }

  get moderator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeModeratorCall__Outputs {
  _call: RevokeModeratorCall;

  constructor(call: RevokeModeratorCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetPrimaryIndexTokenCall extends ethereum.Call {
  get inputs(): SetPrimaryIndexTokenCall__Inputs {
    return new SetPrimaryIndexTokenCall__Inputs(this);
  }

  get outputs(): SetPrimaryIndexTokenCall__Outputs {
    return new SetPrimaryIndexTokenCall__Outputs(this);
  }
}

export class SetPrimaryIndexTokenCall__Inputs {
  _call: SetPrimaryIndexTokenCall;

  constructor(call: SetPrimaryIndexTokenCall) {
    this._call = call;
  }

  get _primaryIndexToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPrimaryIndexTokenCall__Outputs {
  _call: SetPrimaryIndexTokenCall;

  constructor(call: SetPrimaryIndexTokenCall) {
    this._call = call;
  }
}

export class SetReserveFactorCall extends ethereum.Call {
  get inputs(): SetReserveFactorCall__Inputs {
    return new SetReserveFactorCall__Inputs(this);
  }

  get outputs(): SetReserveFactorCall__Outputs {
    return new SetReserveFactorCall__Outputs(this);
  }
}

export class SetReserveFactorCall__Inputs {
  _call: SetReserveFactorCall;

  constructor(call: SetReserveFactorCall) {
    this._call = call;
  }

  get reserveFactorMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReserveFactorCall__Outputs {
  _call: SetReserveFactorCall;

  constructor(call: SetReserveFactorCall) {
    this._call = call;
  }
}

export class SweepTokenCall extends ethereum.Call {
  get inputs(): SweepTokenCall__Inputs {
    return new SweepTokenCall__Inputs(this);
  }

  get outputs(): SweepTokenCall__Outputs {
    return new SweepTokenCall__Outputs(this);
  }
}

export class SweepTokenCall__Inputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepTokenCall__Outputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }
}

export class TotalBorrowsCurrentCall extends ethereum.Call {
  get inputs(): TotalBorrowsCurrentCall__Inputs {
    return new TotalBorrowsCurrentCall__Inputs(this);
  }

  get outputs(): TotalBorrowsCurrentCall__Outputs {
    return new TotalBorrowsCurrentCall__Outputs(this);
  }
}

export class TotalBorrowsCurrentCall__Inputs {
  _call: TotalBorrowsCurrentCall;

  constructor(call: TotalBorrowsCurrentCall) {
    this._call = call;
  }
}

export class TotalBorrowsCurrentCall__Outputs {
  _call: TotalBorrowsCurrentCall;

  constructor(call: TotalBorrowsCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferAdminshipCall extends ethereum.Call {
  get inputs(): TransferAdminshipCall__Inputs {
    return new TransferAdminshipCall__Inputs(this);
  }

  get outputs(): TransferAdminshipCall__Outputs {
    return new TransferAdminshipCall__Outputs(this);
  }
}

export class TransferAdminshipCall__Inputs {
  _call: TransferAdminshipCall;

  constructor(call: TransferAdminshipCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminshipCall__Outputs {
  _call: TransferAdminshipCall;

  constructor(call: TransferAdminshipCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
