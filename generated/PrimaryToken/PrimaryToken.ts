// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddLendingToken extends ethereum.Event {
  get params(): AddLendingToken__Params {
    return new AddLendingToken__Params(this);
  }
}

export class AddLendingToken__Params {
  _event: AddLendingToken;

  constructor(event: AddLendingToken) {
    this._event = event;
  }

  get lendingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class AddPrjToken extends ethereum.Event {
  get params(): AddPrjToken__Params {
    return new AddPrjToken__Params(this);
  }
}

export class AddPrjToken__Params {
  _event: AddPrjToken;

  constructor(event: AddPrjToken) {
    this._event = event;
  }

  get tokenPrj(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrowToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get prjAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get prjAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenPrj(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lendingToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get prjDepositAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lendingToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get prjAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amountPrjLiquidated(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidationIncentiveSet extends ethereum.Event {
  get params(): LiquidationIncentiveSet__Params {
    return new LiquidationIncentiveSet__Params(this);
  }
}

export class LiquidationIncentiveSet__Params {
  _event: LiquidationIncentiveSet;

  constructor(event: LiquidationIncentiveSet) {
    this._event = event;
  }

  get tokenPrj(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ltfNumerator(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get ltfDenominator(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class LiquidationThresholdFactorSet extends ethereum.Event {
  get params(): LiquidationThresholdFactorSet__Params {
    return new LiquidationThresholdFactorSet__Params(this);
  }
}

export class LiquidationThresholdFactorSet__Params {
  _event: LiquidationThresholdFactorSet;

  constructor(event: LiquidationThresholdFactorSet) {
    this._event = event;
  }

  get tokenPrj(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ltfNumerator(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get ltfDenominator(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class LoanToValueRatioSet extends ethereum.Event {
  get params(): LoanToValueRatioSet__Params {
    return new LoanToValueRatioSet__Params(this);
  }
}

export class LoanToValueRatioSet__Params {
  _event: LoanToValueRatioSet;

  constructor(event: LoanToValueRatioSet) {
    this._event = event;
  }

  get tokenPrj(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lvrNumerator(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get lvrDenominator(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get redeemBToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedeemUnderlying extends ethereum.Event {
  get params(): RedeemUnderlying__Params {
    return new RedeemUnderlying__Params(this);
  }
}

export class RedeemUnderlying__Params {
  _event: RedeemUnderlying;

  constructor(event: RedeemUnderlying) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get redeemToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get redeemBToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get redeemAmountUnderlying(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveLendingToken extends ethereum.Event {
  get params(): RemoveLendingToken__Params {
    return new RemoveLendingToken__Params(this);
  }
}

export class RemoveLendingToken__Params {
  _event: RemoveLendingToken;

  constructor(event: RemoveLendingToken) {
    this._event = event;
  }

  get lendingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveProjectToken extends ethereum.Event {
  get params(): RemoveProjectToken__Params {
    return new RemoveProjectToken__Params(this);
  }
}

export class RemoveProjectToken__Params {
  _event: RemoveProjectToken;

  constructor(event: RemoveProjectToken) {
    this._event = event;
  }

  get tokenPrj(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RepayBorrow extends ethereum.Event {
  get params(): RepayBorrow__Params {
    return new RepayBorrow__Params(this);
  }
}

export class RepayBorrow__Params {
  _event: RepayBorrow;

  constructor(event: RepayBorrow) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get borrowToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get prjAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get isPositionFullyRepaid(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get supplyToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get supplyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get supplyBToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amountSupplyBTokenReceived(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenPrj(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lendingToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get prjWithdrawAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class PrimaryToken__borrowPositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLoanBody(): BigInt {
    return this.value0;
  }

  getAccrual(): BigInt {
    return this.value1;
  }
}

export class PrimaryToken__getPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getDepositedProjectTokenAmount(): BigInt {
    return this.value0;
  }

  getLoanBody(): BigInt {
    return this.value1;
  }

  getAccrual(): BigInt {
    return this.value2;
  }

  getHealthFactorNumerator(): BigInt {
    return this.value3;
  }

  getHealthFactorDenominator(): BigInt {
    return this.value4;
  }
}

export class PrimaryToken__healthFactorResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getNumerator(): BigInt {
    return this.value0;
  }

  getDenominator(): BigInt {
    return this.value1;
  }
}

export class PrimaryToken__lendingTokenInfoResult {
  value0: boolean;
  value1: boolean;
  value2: Address;

  constructor(value0: boolean, value1: boolean, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getIsListed(): boolean {
    return this.value0;
  }

  getIsPaused(): boolean {
    return this.value1;
  }

  getBLendingToken(): Address {
    return this.value2;
  }
}

export class PrimaryToken__projectTokenInfoResultLoanToValueRatioStruct extends ethereum.Tuple {
  get numerator(): i32 {
    return this[0].toI32();
  }

  get denominator(): i32 {
    return this[1].toI32();
  }
}

export class PrimaryToken__projectTokenInfoResultLiquidationThresholdFactorStruct extends ethereum.Tuple {
  get numerator(): i32 {
    return this[0].toI32();
  }

  get denominator(): i32 {
    return this[1].toI32();
  }
}

export class PrimaryToken__projectTokenInfoResultLiquidationIncentiveStruct extends ethereum.Tuple {
  get numerator(): i32 {
    return this[0].toI32();
  }

  get denominator(): i32 {
    return this[1].toI32();
  }
}

export class PrimaryToken__projectTokenInfoResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;
  value3: PrimaryToken__projectTokenInfoResultLoanToValueRatioStruct;
  value4: PrimaryToken__projectTokenInfoResultLiquidationThresholdFactorStruct;
  value5: PrimaryToken__projectTokenInfoResultLiquidationIncentiveStruct;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: boolean,
    value3: PrimaryToken__projectTokenInfoResultLoanToValueRatioStruct,
    value4: PrimaryToken__projectTokenInfoResultLiquidationThresholdFactorStruct,
    value5: PrimaryToken__projectTokenInfoResultLiquidationIncentiveStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromTuple(this.value3));
    map.set("value4", ethereum.Value.fromTuple(this.value4));
    map.set("value5", ethereum.Value.fromTuple(this.value5));
    return map;
  }

  getIsListed(): boolean {
    return this.value0;
  }

  getIsDepositPaused(): boolean {
    return this.value1;
  }

  getIsWithdrawPaused(): boolean {
    return this.value2;
  }

  getLoanToValueRatio(): PrimaryToken__projectTokenInfoResultLoanToValueRatioStruct {
    return this.value3;
  }

  getLiquidationThresholdFactor(): PrimaryToken__projectTokenInfoResultLiquidationThresholdFactorStruct {
    return this.value4;
  }

  getLiquidationIncentive(): PrimaryToken__projectTokenInfoResultLiquidationIncentiveStruct {
    return this.value5;
  }
}

export class PrimaryToken extends ethereum.SmartContract {
  static bind(address: Address): PrimaryToken {
    return new PrimaryToken("PrimaryToken", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MODERATOR_ROLE(): Bytes {
    let result = super.call("MODERATOR_ROLE", "MODERATOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MODERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MODERATOR_ROLE",
      "MODERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  borrowLimit(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "borrowLimit",
      "borrowLimit(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_borrowLimit(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowLimit",
      "borrowLimit(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowLimitPerCollateral(param0: Address): BigInt {
    let result = super.call(
      "borrowLimitPerCollateral",
      "borrowLimitPerCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_borrowLimitPerCollateral(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowLimitPerCollateral",
      "borrowLimitPerCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowLimitPerLendingToken(param0: Address): BigInt {
    let result = super.call(
      "borrowLimitPerLendingToken",
      "borrowLimitPerLendingToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_borrowLimitPerLendingToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowLimitPerLendingToken",
      "borrowLimitPerLendingToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowPosition(
    param0: Address,
    param1: Address,
    param2: Address
  ): PrimaryToken__borrowPositionResult {
    let result = super.call(
      "borrowPosition",
      "borrowPosition(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return new PrimaryToken__borrowPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_borrowPosition(
    param0: Address,
    param1: Address,
    param2: Address
  ): ethereum.CallResult<PrimaryToken__borrowPositionResult> {
    let result = super.tryCall(
      "borrowPosition",
      "borrowPosition(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimaryToken__borrowPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  convertPitRemaining(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): BigInt {
    let result = super.call(
      "convertPitRemaining",
      "convertPitRemaining(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_convertPitRemaining(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertPitRemaining",
      "convertPitRemaining(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDepositedAmount(projectToken: Address, user: Address): BigInt {
    let result = super.call(
      "getDepositedAmount",
      "getDepositedAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDepositedAmount(
    projectToken: Address,
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositedAmount",
      "getDepositedAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPosition(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): PrimaryToken__getPositionResult {
    let result = super.call(
      "getPosition",
      "getPosition(address,address,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );

    return new PrimaryToken__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getPosition(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): ethereum.CallResult<PrimaryToken__getPositionResult> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(address,address,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimaryToken__getPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getPriceConvert(lendingToken: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getPriceConvert",
      "getPriceConvert(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(lendingToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriceConvert(
    lendingToken: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceConvert",
      "getPriceConvert(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(lendingToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTokenEvaluation(token: Address, tokenAmount: BigInt): BigInt {
    let result = super.call(
      "getTokenEvaluation",
      "getTokenEvaluation(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(tokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenEvaluation(
    token: Address,
    tokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenEvaluation",
      "getTokenEvaluation(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(tokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalBorrowPerCollateral(projectToken: Address): BigInt {
    let result = super.call(
      "getTotalBorrowPerCollateral",
      "getTotalBorrowPerCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(projectToken)]
    );

    return result[0].toBigInt();
  }

  try_getTotalBorrowPerCollateral(
    projectToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBorrowPerCollateral",
      "getTotalBorrowPerCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(projectToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalBorrowPerLendingToken(lendingToken: Address): BigInt {
    let result = super.call(
      "getTotalBorrowPerLendingToken",
      "getTotalBorrowPerLendingToken(address):(uint256)",
      [ethereum.Value.fromAddress(lendingToken)]
    );

    return result[0].toBigInt();
  }

  try_getTotalBorrowPerLendingToken(
    lendingToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBorrowPerLendingToken",
      "getTotalBorrowPerLendingToken(address):(uint256)",
      [ethereum.Value.fromAddress(lendingToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  healthFactor(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): PrimaryToken__healthFactorResult {
    let result = super.call(
      "healthFactor",
      "healthFactor(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );

    return new PrimaryToken__healthFactorResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_healthFactor(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): ethereum.CallResult<PrimaryToken__healthFactorResult> {
    let result = super.tryCall(
      "healthFactor",
      "healthFactor(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimaryToken__healthFactorResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  lendingTokenInfo(param0: Address): PrimaryToken__lendingTokenInfoResult {
    let result = super.call(
      "lendingTokenInfo",
      "lendingTokenInfo(address):(bool,bool,address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PrimaryToken__lendingTokenInfoResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toAddress()
    );
  }

  try_lendingTokenInfo(
    param0: Address
  ): ethereum.CallResult<PrimaryToken__lendingTokenInfoResult> {
    let result = super.tryCall(
      "lendingTokenInfo",
      "lendingTokenInfo(address):(bool,bool,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimaryToken__lendingTokenInfoResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toAddress()
      )
    );
  }

  lendingTokenPerCollateral(param0: Address, param1: Address): Address {
    let result = super.call(
      "lendingTokenPerCollateral",
      "lendingTokenPerCollateral(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toAddress();
  }

  try_lendingTokenPerCollateral(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingTokenPerCollateral",
      "lendingTokenPerCollateral(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lendingTokens(param0: BigInt): Address {
    let result = super.call(
      "lendingTokens",
      "lendingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_lendingTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingTokens",
      "lendingTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lendingTokensLength(): BigInt {
    let result = super.call(
      "lendingTokensLength",
      "lendingTokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lendingTokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lendingTokensLength",
      "lendingTokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationThreshold(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): BigInt {
    let result = super.call(
      "liquidationThreshold",
      "liquidationThreshold(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidationThreshold(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationThreshold",
      "liquidationThreshold(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pit(account: Address, projectToken: Address): BigInt {
    let result = super.call("pit", "pit(address,address):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(projectToken)
    ]);

    return result[0].toBigInt();
  }

  try_pit(
    account: Address,
    projectToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pit", "pit(address,address):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromAddress(projectToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pitRemaining(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): BigInt {
    let result = super.call(
      "pitRemaining",
      "pitRemaining(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_pitRemaining(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pitRemaining",
      "pitRemaining(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceOracle(): Address {
    let result = super.call("priceOracle", "priceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_priceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceOracle", "priceOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectTokenInfo(param0: Address): PrimaryToken__projectTokenInfoResult {
    let result = super.call(
      "projectTokenInfo",
      "projectTokenInfo(address):(bool,bool,bool,(uint8,uint8),(uint8,uint8),(uint8,uint8))",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PrimaryToken__projectTokenInfoResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      changetype<PrimaryToken__projectTokenInfoResultLoanToValueRatioStruct>(
        result[3].toTuple()
      ),
      changetype<
        PrimaryToken__projectTokenInfoResultLiquidationThresholdFactorStruct
      >(result[4].toTuple()),
      changetype<
        PrimaryToken__projectTokenInfoResultLiquidationIncentiveStruct
      >(result[5].toTuple())
    );
  }

  try_projectTokenInfo(
    param0: Address
  ): ethereum.CallResult<PrimaryToken__projectTokenInfoResult> {
    let result = super.tryCall(
      "projectTokenInfo",
      "projectTokenInfo(address):(bool,bool,bool,(uint8,uint8),(uint8,uint8),(uint8,uint8))",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrimaryToken__projectTokenInfoResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        changetype<PrimaryToken__projectTokenInfoResultLoanToValueRatioStruct>(
          value[3].toTuple()
        ),
        changetype<
          PrimaryToken__projectTokenInfoResultLiquidationThresholdFactorStruct
        >(value[4].toTuple()),
        changetype<
          PrimaryToken__projectTokenInfoResultLiquidationIncentiveStruct
        >(value[5].toTuple())
      )
    );
  }

  projectTokens(param0: BigInt): Address {
    let result = super.call(
      "projectTokens",
      "projectTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_projectTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "projectTokens",
      "projectTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectTokensLength(): BigInt {
    let result = super.call(
      "projectTokensLength",
      "projectTokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_projectTokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectTokensLength",
      "projectTokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repay(
    projectToken: Address,
    lendingToken: Address,
    lendingTokenAmount: BigInt
  ): BigInt {
    let result = super.call(
      "repay",
      "repay(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken),
        ethereum.Value.fromUnsignedBigInt(lendingTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_repay(
    projectToken: Address,
    lendingToken: Address,
    lendingTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repay",
      "repay(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken),
        ethereum.Value.fromUnsignedBigInt(lendingTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBorrow(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "totalBorrow",
      "totalBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_totalBorrow(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrow",
      "totalBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrowPerLendingToken(param0: Address): BigInt {
    let result = super.call(
      "totalBorrowPerLendingToken",
      "totalBorrowPerLendingToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalBorrowPerLendingToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowPerLendingToken",
      "totalBorrowPerLendingToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedProjectToken(param0: Address): BigInt {
    let result = super.call(
      "totalDepositedProjectToken",
      "totalDepositedProjectToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalDepositedProjectToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedProjectToken",
      "totalDepositedProjectToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalOutstanding(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): BigInt {
    let result = super.call(
      "totalOutstanding",
      "totalOutstanding(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalOutstanding(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalOutstanding",
      "totalOutstanding(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalOutstandingInUSD(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): BigInt {
    let result = super.call(
      "totalOutstandingInUSD",
      "totalOutstandingInUSD(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalOutstandingInUSD(
    account: Address,
    projectToken: Address,
    lendingToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalOutstandingInUSD",
      "totalOutstandingInUSD(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(projectToken),
        ethereum.Value.fromAddress(lendingToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdcToken(): Address {
    let result = super.call("usdcToken", "usdcToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdcToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdcToken", "usdcToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddLendingTokenCall extends ethereum.Call {
  get inputs(): AddLendingTokenCall__Inputs {
    return new AddLendingTokenCall__Inputs(this);
  }

  get outputs(): AddLendingTokenCall__Outputs {
    return new AddLendingTokenCall__Outputs(this);
  }
}

export class AddLendingTokenCall__Inputs {
  _call: AddLendingTokenCall;

  constructor(call: AddLendingTokenCall) {
    this._call = call;
  }

  get _lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bLendingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isPaused(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddLendingTokenCall__Outputs {
  _call: AddLendingTokenCall;

  constructor(call: AddLendingTokenCall) {
    this._call = call;
  }
}

export class AddProjectTokenCall extends ethereum.Call {
  get inputs(): AddProjectTokenCall__Inputs {
    return new AddProjectTokenCall__Inputs(this);
  }

  get outputs(): AddProjectTokenCall__Outputs {
    return new AddProjectTokenCall__Outputs(this);
  }
}

export class AddProjectTokenCall__Inputs {
  _call: AddProjectTokenCall;

  constructor(call: AddProjectTokenCall) {
    this._call = call;
  }

  get _projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _loanToValueRatioNumerator(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _loanToValueRatioDenominator(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _liquidationThresholdFactorNumerator(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _liquidationThresholdFactorDenominator(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _liquidationIncentiveNumerator(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _liquidationIncentiveDenominator(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class AddProjectTokenCall__Outputs {
  _call: AddProjectTokenCall;

  constructor(call: AddProjectTokenCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lendingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get lendingTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get projectTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class GrandModeratorCall extends ethereum.Call {
  get inputs(): GrandModeratorCall__Inputs {
    return new GrandModeratorCall__Inputs(this);
  }

  get outputs(): GrandModeratorCall__Outputs {
    return new GrandModeratorCall__Outputs(this);
  }
}

export class GrandModeratorCall__Inputs {
  _call: GrandModeratorCall;

  constructor(call: GrandModeratorCall) {
    this._call = call;
  }

  get newModerator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrandModeratorCall__Outputs {
  _call: GrandModeratorCall;

  constructor(call: GrandModeratorCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get projectToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get lendingToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bLendingTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lendingTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }
}

export class RemoveLendingTokenCall extends ethereum.Call {
  get inputs(): RemoveLendingTokenCall__Inputs {
    return new RemoveLendingTokenCall__Inputs(this);
  }

  get outputs(): RemoveLendingTokenCall__Outputs {
    return new RemoveLendingTokenCall__Outputs(this);
  }
}

export class RemoveLendingTokenCall__Inputs {
  _call: RemoveLendingTokenCall;

  constructor(call: RemoveLendingTokenCall) {
    this._call = call;
  }

  get _lendingTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveLendingTokenCall__Outputs {
  _call: RemoveLendingTokenCall;

  constructor(call: RemoveLendingTokenCall) {
    this._call = call;
  }
}

export class RemoveProjectTokenCall extends ethereum.Call {
  get inputs(): RemoveProjectTokenCall__Inputs {
    return new RemoveProjectTokenCall__Inputs(this);
  }

  get outputs(): RemoveProjectTokenCall__Outputs {
    return new RemoveProjectTokenCall__Outputs(this);
  }
}

export class RemoveProjectTokenCall__Inputs {
  _call: RemoveProjectTokenCall;

  constructor(call: RemoveProjectTokenCall) {
    this._call = call;
  }

  get _projectTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveProjectTokenCall__Outputs {
  _call: RemoveProjectTokenCall;

  constructor(call: RemoveProjectTokenCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lendingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get lendingTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RevokeModeratorCall extends ethereum.Call {
  get inputs(): RevokeModeratorCall__Inputs {
    return new RevokeModeratorCall__Inputs(this);
  }

  get outputs(): RevokeModeratorCall__Outputs {
    return new RevokeModeratorCall__Outputs(this);
  }
}

export class RevokeModeratorCall__Inputs {
  _call: RevokeModeratorCall;

  constructor(call: RevokeModeratorCall) {
    this._call = call;
  }

  get moderator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeModeratorCall__Outputs {
  _call: RevokeModeratorCall;

  constructor(call: RevokeModeratorCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetBorrowLimitPerCollateralCall extends ethereum.Call {
  get inputs(): SetBorrowLimitPerCollateralCall__Inputs {
    return new SetBorrowLimitPerCollateralCall__Inputs(this);
  }

  get outputs(): SetBorrowLimitPerCollateralCall__Outputs {
    return new SetBorrowLimitPerCollateralCall__Outputs(this);
  }
}

export class SetBorrowLimitPerCollateralCall__Inputs {
  _call: SetBorrowLimitPerCollateralCall;

  constructor(call: SetBorrowLimitPerCollateralCall) {
    this._call = call;
  }

  get projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrowLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBorrowLimitPerCollateralCall__Outputs {
  _call: SetBorrowLimitPerCollateralCall;

  constructor(call: SetBorrowLimitPerCollateralCall) {
    this._call = call;
  }
}

export class SetBorrowLimitPerLendingAssetCall extends ethereum.Call {
  get inputs(): SetBorrowLimitPerLendingAssetCall__Inputs {
    return new SetBorrowLimitPerLendingAssetCall__Inputs(this);
  }

  get outputs(): SetBorrowLimitPerLendingAssetCall__Outputs {
    return new SetBorrowLimitPerLendingAssetCall__Outputs(this);
  }
}

export class SetBorrowLimitPerLendingAssetCall__Inputs {
  _call: SetBorrowLimitPerLendingAssetCall;

  constructor(call: SetBorrowLimitPerLendingAssetCall) {
    this._call = call;
  }

  get lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrowLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBorrowLimitPerLendingAssetCall__Outputs {
  _call: SetBorrowLimitPerLendingAssetCall;

  constructor(call: SetBorrowLimitPerLendingAssetCall) {
    this._call = call;
  }
}

export class SetLendingTokenForCollCall extends ethereum.Call {
  get inputs(): SetLendingTokenForCollCall__Inputs {
    return new SetLendingTokenForCollCall__Inputs(this);
  }

  get outputs(): SetLendingTokenForCollCall__Outputs {
    return new SetLendingTokenForCollCall__Outputs(this);
  }
}

export class SetLendingTokenForCollCall__Inputs {
  _call: SetLendingTokenForCollCall;

  constructor(call: SetLendingTokenForCollCall) {
    this._call = call;
  }

  get projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get lendingToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetLendingTokenForCollCall__Outputs {
  _call: SetLendingTokenForCollCall;

  constructor(call: SetLendingTokenForCollCall) {
    this._call = call;
  }
}

export class SetLendingTokenInfoCall extends ethereum.Call {
  get inputs(): SetLendingTokenInfoCall__Inputs {
    return new SetLendingTokenInfoCall__Inputs(this);
  }

  get outputs(): SetLendingTokenInfoCall__Outputs {
    return new SetLendingTokenInfoCall__Outputs(this);
  }
}

export class SetLendingTokenInfoCall__Inputs {
  _call: SetLendingTokenInfoCall;

  constructor(call: SetLendingTokenInfoCall) {
    this._call = call;
  }

  get _lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bLendingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isPaused(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetLendingTokenInfoCall__Outputs {
  _call: SetLendingTokenInfoCall;

  constructor(call: SetLendingTokenInfoCall) {
    this._call = call;
  }
}

export class SetPausedLendingTokenCall extends ethereum.Call {
  get inputs(): SetPausedLendingTokenCall__Inputs {
    return new SetPausedLendingTokenCall__Inputs(this);
  }

  get outputs(): SetPausedLendingTokenCall__Outputs {
    return new SetPausedLendingTokenCall__Outputs(this);
  }
}

export class SetPausedLendingTokenCall__Inputs {
  _call: SetPausedLendingTokenCall;

  constructor(call: SetPausedLendingTokenCall) {
    this._call = call;
  }

  get _lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isPaused(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPausedLendingTokenCall__Outputs {
  _call: SetPausedLendingTokenCall;

  constructor(call: SetPausedLendingTokenCall) {
    this._call = call;
  }
}

export class SetPausedProjectTokenCall extends ethereum.Call {
  get inputs(): SetPausedProjectTokenCall__Inputs {
    return new SetPausedProjectTokenCall__Inputs(this);
  }

  get outputs(): SetPausedProjectTokenCall__Outputs {
    return new SetPausedProjectTokenCall__Outputs(this);
  }
}

export class SetPausedProjectTokenCall__Inputs {
  _call: SetPausedProjectTokenCall;

  constructor(call: SetPausedProjectTokenCall) {
    this._call = call;
  }

  get _projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isDepositPaused(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _isWithdrawPaused(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetPausedProjectTokenCall__Outputs {
  _call: SetPausedProjectTokenCall;

  constructor(call: SetPausedProjectTokenCall) {
    this._call = call;
  }
}

export class SetPriceOracleCall extends ethereum.Call {
  get inputs(): SetPriceOracleCall__Inputs {
    return new SetPriceOracleCall__Inputs(this);
  }

  get outputs(): SetPriceOracleCall__Outputs {
    return new SetPriceOracleCall__Outputs(this);
  }
}

export class SetPriceOracleCall__Inputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }

  get _priceOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPriceOracleCall__Outputs {
  _call: SetPriceOracleCall;

  constructor(call: SetPriceOracleCall) {
    this._call = call;
  }
}

export class SetProjectTokenInfoCall extends ethereum.Call {
  get inputs(): SetProjectTokenInfoCall__Inputs {
    return new SetProjectTokenInfoCall__Inputs(this);
  }

  get outputs(): SetProjectTokenInfoCall__Outputs {
    return new SetProjectTokenInfoCall__Outputs(this);
  }
}

export class SetProjectTokenInfoCall__Inputs {
  _call: SetProjectTokenInfoCall;

  constructor(call: SetProjectTokenInfoCall) {
    this._call = call;
  }

  get _projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _loanToValueRatioNumerator(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _loanToValueRatioDenominator(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _liquidationThresholdFactorNumerator(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _liquidationThresholdFactorDenominator(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _liquidationIncentiveNumerator(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _liquidationIncentiveDenominator(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class SetProjectTokenInfoCall__Outputs {
  _call: SetProjectTokenInfoCall;

  constructor(call: SetProjectTokenInfoCall) {
    this._call = call;
  }
}

export class SetTotalBorrowPerLendingTokenCall extends ethereum.Call {
  get inputs(): SetTotalBorrowPerLendingTokenCall__Inputs {
    return new SetTotalBorrowPerLendingTokenCall__Inputs(this);
  }

  get outputs(): SetTotalBorrowPerLendingTokenCall__Outputs {
    return new SetTotalBorrowPerLendingTokenCall__Outputs(this);
  }
}

export class SetTotalBorrowPerLendingTokenCall__Inputs {
  _call: SetTotalBorrowPerLendingTokenCall;

  constructor(call: SetTotalBorrowPerLendingTokenCall) {
    this._call = call;
  }

  get lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTotalBorrowPerLendingTokenCall__Outputs {
  _call: SetTotalBorrowPerLendingTokenCall;

  constructor(call: SetTotalBorrowPerLendingTokenCall) {
    this._call = call;
  }
}

export class SetUSDCTokenCall extends ethereum.Call {
  get inputs(): SetUSDCTokenCall__Inputs {
    return new SetUSDCTokenCall__Inputs(this);
  }

  get outputs(): SetUSDCTokenCall__Outputs {
    return new SetUSDCTokenCall__Outputs(this);
  }
}

export class SetUSDCTokenCall__Inputs {
  _call: SetUSDCTokenCall;

  constructor(call: SetUSDCTokenCall) {
    this._call = call;
  }

  get usdc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUSDCTokenCall__Outputs {
  _call: SetUSDCTokenCall;

  constructor(call: SetUSDCTokenCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lendingTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}

export class TransferAdminshipCall extends ethereum.Call {
  get inputs(): TransferAdminshipCall__Inputs {
    return new TransferAdminshipCall__Inputs(this);
  }

  get outputs(): TransferAdminshipCall__Outputs {
    return new TransferAdminshipCall__Outputs(this);
  }
}

export class TransferAdminshipCall__Inputs {
  _call: TransferAdminshipCall;

  constructor(call: TransferAdminshipCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminshipCall__Outputs {
  _call: TransferAdminshipCall;

  constructor(call: TransferAdminshipCall) {
    this._call = call;
  }
}

export class UpdateInterestInBorrowPositionsCall extends ethereum.Call {
  get inputs(): UpdateInterestInBorrowPositionsCall__Inputs {
    return new UpdateInterestInBorrowPositionsCall__Inputs(this);
  }

  get outputs(): UpdateInterestInBorrowPositionsCall__Outputs {
    return new UpdateInterestInBorrowPositionsCall__Outputs(this);
  }
}

export class UpdateInterestInBorrowPositionsCall__Inputs {
  _call: UpdateInterestInBorrowPositionsCall;

  constructor(call: UpdateInterestInBorrowPositionsCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lendingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateInterestInBorrowPositionsCall__Outputs {
  _call: UpdateInterestInBorrowPositionsCall;

  constructor(call: UpdateInterestInBorrowPositionsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get projectToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get projectTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
